二进制转换器
时间限制	1000ms	空间限制	256MB

又是一个熟悉的夜晚，你在图书馆学了一天，在走回寝室的路上，碰巧遇上了爱乐普第公司 (ALPD Co., Ltd.) 技术部的小甜。小甜最近很苦恼，因为他正在研究网上关于“数据流”“熵编码”“指令集优化”的文章，需要把之前用于压缩服务器日志文件的算法进一步补充完善。他被搞得晕头转向，想找人帮帮他。首先需要实现的是将整数转为二进制数字符串的功能，这并不复杂，甚至可以说是太简单了！正好你也实现了对日志文件的压缩，对这个基础功能应该很熟悉了，他决定把这个任务交给你来办！

TO-DO
请你编写一个程序，将整数转换为二进制数的形式。

从 cin/stdin 中读取输入，将整数和一个字符串地址传递给封装函数 itobs()，在函数内使用移位运算符计算出这个整数在计算机内储存的二进制组合，并写入字符串内。

注意：

函数原型规定如下
void itobs(int num, char* buffer) {
    /* 将整数转换为二进制并存入 buffer 字符串 */
    /* 例：1964 的二进制是：00000000 00000000 00000111 10101100 */
}
必须以位运算方式完成，其他方式不得分。

程序需循环读入数据，直到一个非整型数据结束退出。

输入数据说明
输入数据共 1 行，包括若干个数据。
本题不需要考虑错误输入，除最后一个数据外，其余所有数据保证合法。
除最后一个数据外，所有数据都是 int32  (4 字节有符号整数) ，其范围 -2147483648 ~ 2147483647。
最后一个数据为一个随机字符，范围是小写 a 到小写 z (ASCII97-ASCII122)。
输出格式说明
请输出整数的二进制字符串，以 8 个字符为一组分割，具体格式请看测试点。
输出应考虑人性化提示。
限制
不允许使用尚未讲授过的后续课程中的知识点
过程中请给出相应的输入提示与输出提示
程序编写应符合锯齿型的书写格式
不允许使用 goto
除明确要求外，不允许使用 C++ 的 std::string 类
运行时间 1 秒
运行使用内存 128MB
输出限制 2048 个字符
评分标准
若编译运行成功，即有 5 分基础分
若出现编译 Warning，扣 1 分，若发现非法语句，如 system("pause") 和 goto 等，扣 2 分
若出现非正常退出 (Runtime Error)，按测试点视情况扣分
【人工审核项】 若发现代码使用后续知识点，视情况扣分
【人工审核项】 若代码书写不规范或整洁度极差(如变量取名不规范或没有按照锯齿型书写等)，视情况扣分
【人工审核项】 不符合题目要求（如要求用递归完成而没有使用、没有错误性输入检测等），视情况扣分
【人工审核项】 不使用位运算的，0 分
直接输出答案而非程序运行结果的，0 分
抄袭舞弊者，0 分
测试用例
输入

-18103 29034 -31100 3077 26139 21021 -7514 1964    25226 -31907 195 10761 -16338 30271 -30053 r
输出

输入一些整数：
-18103 的二进制是：11111111 11111111 10111001 01001001
29034 的二进制是：00000000 00000000 01110001 01101010
-31100 的二进制是：11111111 11111111 10000110 10000100
3077 的二进制是：00000000 00000000 00001100 00000101
26139 的二进制是：00000000 00000000 01100110 00011011
21021 的二进制是：00000000 00000000 01010010 00011101
-7514 的二进制是：11111111 11111111 11100010 10100110
1964 的二进制是：00000000 00000000 00000111 10101100
25226 的二进制是：00000000 00000000 01100010 10001010
-31907 的二进制是：11111111 11111111 10000011 01011101
195 的二进制是：00000000 00000000 00000000 11000011
10761 的二进制是：00000000 00000000 00101010 00001001
-16338 的二进制是：11111111 11111111 11000000 00101110
30271 的二进制是：00000000 00000000 01110110 00111111
-30053 的二进制是：11111111 11111111 10001010 10011011
------程序结束------