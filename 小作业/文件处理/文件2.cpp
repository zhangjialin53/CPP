//文件 - 2 - 输入输出流基本练习
//时间限制	1000ms	空间限制	256MB
//
//风依旧在大姐头耳边吹起
//
//就像是承载了远方的呼喊
//
//或者是跨越时间的摸索前行
//
//大姐头看着一串串数字像是开始有了生命
//
//变得工整、有条理
//
//好像目光尽头就是生机勃勃的生命
//
//――但是这样不行
//
//任由发展的世界带来的虽然是自由
//
//但是自由之下到底是繁荣还是毁灭
//
//有压力才会有从艰难困苦中磨砺出来的结果
//
//世间万物都是这个道理
//
//可是她不忍心
//
//或许在这一刻，她只是一个普通的母亲
//
//看着自己的孩子，不忍折磨，可是自然的选择无可避免
//
//如果给你这样的权力，健全这个世界，选择生命
//
//只将整数、流传下去
//
//TO - DO
//编写函数，接受一个 istream & 参数，返回值类型也是 istream & 。此函数须从给定流中读取数据，直至遇到文件结束标识时停止。它将读取的数据打印在标准输出上。完成这些操作后，在返回流之前，对流进行复位，使其处于有效状态。
//
//注意：
//
//函数原型规定如下：
///* 复读整数，并拒绝错误输入 */
//istream & f(istream & in) {
//
//}
//主函数规定如下：
//int main() {
//    cout << "请输入一些整数，以-1或Ctrl+Z结束。" << endl;
//    f(cin);
//    return 0;
//}
//你可能会用到以下流的一些相关操作：
//
//流的结束状态 : in.eof()
//错误状态：in.bad()
//数据错误状态：in.fail()
//以及 in.clear(), in.ignore() 等，更多操作建议参阅 C++ Reference。
//对于 TO - DO 描述最后一段 : 完成这些操作后，在返回流之前，对流进行复位，使其处于有效状态。对于加粗内容的描述有歧义，现给出两种复位方式，请同学们思考这两种方式的异同，以及你认为哪种方式更好，请备注在你的代码进行提交。
//
//// 复位方式1
//istream & f(istream & in) {
//    /* 复读整数，并拒绝错误输入 */
//    auto in_state = in.rdstate(); // 保存流入函数的状态
//
//    // do something
//
//    in.setstate(in_state);        // 复位流           
//    return in;
//}
//// 复位方式2            
//istream& f(istream& in) {
//    /* 复读整数，并拒绝错误输入 */
//
//    // do something
//
//    in.clear(); // 复位流
//    return in;
//}
//遇到错误输入不需要退出程序。
//
//输入数据说明
//一共有不定行输入，每行有一个 整型 数据。
//每一个测试点输入由 - 1 结束，测试点内每个数据以空格(ASCII32) 或换行符 \n(ASCII10) 结束
//本题需要考虑错误输入，我们规定本题合法的数据仅是 int32(4 字节有符号整数) ，其范围 - 2147483648 ~2147483647。
//我们的错误数据可能有超出范围的整数 / 浮点数 / 可打印 ASCII 字符(ASCII33 - ASCII126)，此外没有其他非法输入。
//输出格式说明
//将所有合法的数据输出，当遇到不合法数据时，输出里应至少包含限制列表内允许的错误语句。
//遇到不合法数据不需要退出程序。
//输出应该考虑人性化提示。
//限制
//不允许使用尚未讲授过的后续课程中的知识点
//过程中请给出相应的输入提示与输出提示
//程序编写应符合锯齿型的书写格式
//不允许使用 goto
//除明确要求外，不允许使用 C++ 的 std::string 类
//本题需要考虑输入错误，我们允许的错误提示为 : [Illegal] ，请确保出错的输入有以上错误信息
//运行时间 1 秒
//运行使用内存 128MB
//输出限制 2048 个字符
//评分标准
//若编译运行成功，即有 5 分基础分
//若出现编译 Warning，扣 1 分，若发现非法语句，如 system("pause") 和 goto 等，扣 2 分
//若出现非正常退出(Runtime Error)，按测试点视情况扣分
//【人工审核项】 若发现代码使用后续知识点，视情况扣分
//【人工审核项】 若代码书写不规范或整洁度极差(如变量取名不规范或没有按照锯齿型书写等)，视情况扣分
//【人工审核项】 不符合题目要求（如要求用递归完成而没有使用、没有错误性输入检测等），视情况扣分
//直接输出答案而非程序运行结果的，0 分
//抄袭舞弊者，0 分
//测试用例
//样例1
//779036947 14810838 - 814012221 - 1902727874 - 1663854693 584306529 1411197140 343675845 - 169871253 617762954 - 1
//请输入一些整数，以 - 1或Ctrl + Z结束。
//你说了 : 779036947
//你说了 : 14810838
//你说了 : -814012221
//你说了 : -1902727874
//你说了 : -1663854693
//你说了 : 584306529
//你说了 : 1411197140
//你说了 : 343675845
//你说了 : -169871253
//你说了 : 617762954
//------程序结束------
//样例2
//ItDEF JxSHF zQfEH nztSQ UsrjN 89 20 58 12 84 - 1
//请输入一些整数，以 - 1或Ctrl + Z结束。
//Illegal
//Illegal
//Illegal
//Illegal
//Illegal
//你说了 : 89
//你说了 : 20
//你说了 : 58
//你说了 : 12
//你说了 : 84
//------程序结束------


#include <iostream>
#include <sstream>
using namespace std;

// 复读字符串，并提取其中的整数
istream& f(istream& in) {
    string input;

    // 持续从流中读取数据，直到输入-1或遇到Ctrl+Z
    while (true) {
        in >> input; // 以字符串形式读取整个输入

        stringstream ss(input);
        int num;

        // 检查流是否处于 bad 状态
        if (ss.bad()) {
            throw runtime_error("I/O流错误");
        }

        // 尝试将字符串转换为整数
        if (ss >> num) {
            if (ss.eof()) {
                // 确保整个字符串成功转换为整数
                if (num == -1) {
                    break;
                }
                cout << "你说了:" << num << endl; // 打印合法整数
            }
            else { // 如果转换失败，或有剩余的非法字符
                cout << "Illegal" << endl; // 输出非法输入提示
            }
        }
        else { // 如果转换失败，或有剩余的非法字符
            cout << "Illegal" << endl; // 输出非法输入提示
        }
    }

    // 清除所有错误标志，复位流
    in.clear();
    return in;
}

int main() {
    cout << "请输入一些整数，以-1或Ctrl+Z结束。" << endl;
    f(cin);
    cout << "------程序结束------" << endl;
    return 0;
}