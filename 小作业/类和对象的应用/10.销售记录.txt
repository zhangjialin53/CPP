类和对象的使用-10-销售记录录入
时间限制	1000ms	空间限制	256MB

类和对象的使用-10-销售记录录入
TO-DO
你将负责实现 Book_Sale 类，类的部分结构给出如下，需要注意注释中的相关要求。

class Book_Sale
{
private:
    char * isbn; // 指向书籍编号的指针
                 // 存放书籍编号的空间需动态申请
                 // 书籍编号由 5 段 13 位数字组成，如 978-7-121-15535-2
    int    sales_volume;   // 销售量
    double original_price; // 原始价格
    double real_price;     // 实售价格
    double discount;       // 折扣
    double gross_sales;    // 销售总额

public:
    /* 可以接受 istream & 并从中读取书籍销售信息的构造函数Book_Sale (istream &)，析构函数以及其他必要的成员函数 */
};
请从键盘读入一组信息，第一组信息应用构造函数进行赋值，往后多组信息请用成员函数进行赋值。

类和对象的使用-10-销售记录录入
TO-DO
你将负责实现 Book_Sale 类，类的部分结构给出如下，需要注意注释中的相关要求。

class Book_Sale
{
private:
    char * isbn; // 指向书籍编号的指针
                 // 存放书籍编号的空间需动态申请
                 // 书籍编号由 5 段 13 位数字组成，如 978-7-121-15535-2
    int    sales_volume;   // 销售量
    double original_price; // 原始价格
    double real_price;     // 实售价格
    double discount;       // 折扣
    double gross_sales;    // 销售总额

public:
    /* 可以接受 istream & 并从中读取书籍销售信息的构造函数Book_Sale (istream &)，析构函数以及其他必要的成员函数 */
};
请从键盘读入一组信息，第一组信息应用构造函数进行赋值，往后多组信息请用成员函数进行赋值。

每读入一组信息，计算相应缺少的成员变量，然后将所有成员变量格式化后输出，所有数据以 -1 结束。

对于 isbn 数据，假设书籍均为电子工业出版社的汉语书籍，即前三段固定为 978-7-121，第四段内容由键盘输入，最后一段校验码计算方法由以下公式描述，其中 img 表示第 i 位 isbn 的数值。

img

下面，以 isbn 号 978-7-121-15535 为例：

img

故完整的 isbn 号为 978-7-121-15535-2。

输入数据说明
输入数据可能有任意多行，每行由 4 个数据组成。
第一项数据为 5 位整数，表示 isbn 的第四段数值。
第二项数据为整数，表示该书的销售量，范围 0-10000。
第三项数据为浮点数，表示该书的价格，范围 0-10000。
第四项数据为浮点数，表示该书的折扣，范围 0.0-1.0。
所有数据以 -1 结束。
输出格式说明
至少给出六项信息，分别为完整的 isbn 号，该书的销售量，该书的原价，该书的折扣，该书的实际价格以及总销售额。
注意按上述顺序进行输出。
浮点数判题检查以小数点后三位 (非四舍五入)为准，故你可能需要精确至小数点第 4 位以后，本题不要求直接截断输出，将输出精度控制在测试点能检查的范围即可！
程序应给出相应的人性化提示。
输出限度 6144 字符。
测试样例
输入：

15535 200 128 0.8
15536 100 78 0.85
15537 10000 96 0.76
15538 500 33 0.88
15539 900 54 0.9
-1
输出：

该书的ISBN号为:978-7-121-15535-2
销量为:200本 原价为:128.000元 折扣为:0.800 现价为:102.400元 总销售额为:20480.000元
该书的ISBN号为:978-7-121-15536-9
销量为:100本 原价为:78.000元 折扣为:0.850 现价为:66.300元 总销售额为:6630.000元
该书的ISBN号为:978-7-121-15537-6
销量为:10000本 原价为:96.000元 折扣为:0.760 现价为:72.960元 总销售额为:729600.000元
该书的ISBN号为:978-7-121-15538-3
销量为:500本 原价为:33.000元 折扣为:0.880 现价为:29.040元 总销售额为:14520.000元
该书的ISBN号为:978-7-121-15539-0
销量为:900本 原价为:54.000元 折扣为:0.900 现价为:48.600元 总销售额为:43740.000元
选择语言：
c++
1



#include <iostream>
#include <iomanip>
#include <cstring>
using namespace std;

class Book_Sale {
private:
    char* isbn;               // 动态分配存放 ISBN 号
    int sales_volume;         // 销量
    double original_price;    // 原价
    double real_price;        // 现价
    double discount;          // 折扣
    double gross_sales;       // 总销售额

    // 使用权重计算 ISBN 校验位
    int calculateCheckDigit(const char* isbn_base) {
        int sum = 0;
        int weights[] = { 1, 3 }; // 交替权重
        int index = 0; // 用于追踪权重位置

        for (int i = 0; i < 17; i++) {
            if (isbn_base[i] != '-') {
                sum += (isbn_base[i] - '0') * weights[index % 2];
                index++;
            }
        }
        int r = (10 - (sum % 10)) % 10; // 初步计算校验码

        // 根据特殊规则调整校验码
        if (r == 8) r = 0;
        else if (r == 9) r = 1;
        else r += 2;

        return r;
    }

public:
    // 默认构造函数
    Book_Sale() {
        isbn = new char[18];
        sales_volume = 0;
        original_price = 0.0;
        real_price = 0.0;
        discount = 0.0;
        gross_sales = 0.0;
    }

    // 析构函数：释放动态分配的 ISBN 内存
    ~Book_Sale() {
        delete[] isbn;
    }

    // 成员函数：设置数据并计算所需字段
    void setData(int isbn_part4, int volume, double price, double disc) {
        sales_volume = volume;
        original_price = price;
        discount = disc;

        // 创建前 12 位的 ISBN
        snprintf(isbn, 18, "978-7-121-%05d-", isbn_part4);

        // 计算并附加校验码
        int check_digit = calculateCheckDigit(isbn);
        snprintf(isbn + strlen(isbn), 2, "%d", check_digit);

        // 计算现价和总销售额
        real_price = original_price * discount;
        gross_sales = real_price * sales_volume;
    }

    // 显示所有信息
    void display() const {
        cout << "该书的ISBN号为:" << isbn << endl;
        cout << "销量为:" << sales_volume << "本 "
            << "原价为:" << fixed << setprecision(10) << original_price << "元 "
            << "折扣为:" << discount << " "
            << "现价为:" << real_price << "元 "
            << "总销售额为:" << gross_sales << "元" << endl;
    }
};

int main() {
    int isbn_part4, volume;
    double price, discount;
    Book_Sale book;

    // 统一循环输入所有书籍信息
    cout << "请输入ISBN第四段、销售量、原价和折扣(以-1结束): " << endl;
    while (cin >> isbn_part4 && isbn_part4 != -1) {
        cin >> volume >> price >> discount;
        book.setData(isbn_part4, volume, price, discount);
        book.display();
        cout << "请输入ISBN第四段、销售量、原价和折扣(以-1结束): " << endl;
    }

    return 0;
}
